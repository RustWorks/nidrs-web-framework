---
source: libs/syn-args-derive/src/macro_impl.rs
expression: result.to_string()
---
impl TryFrom < & syn_args :: Value > for ModuleArgs { type Error = syn :: Error ; fn try_from (v : & syn_args :: Value) -> Result < Self , Self :: Error > { if let syn_args :: Value :: Array (v) = v { if let Ok (rt) = syn_args :: utils :: ewc :: < _ , _ , anyhow :: Error > (|| Ok (ModuleArgs :: F1 (syn_args :: utils :: otr (v . get (0usize)) ? . try_into () ? , syn_args :: utils :: otr (v . get (1usize)) ? . try_into () ?))) { return Ok (rt) ; } if let Ok (rt) = syn_args :: utils :: ewc :: < _ , _ , anyhow :: Error > (|| Ok (ModuleArgs :: F2 (syn_args :: utils :: otr (v . get (0usize)) ? . try_into () ?))) { return Ok (rt) ; } if let Ok (rt) = syn_args :: utils :: ewc :: < _ , _ , anyhow :: Error > (|| Ok (ModuleArgs :: F3 (syn_args :: utils :: otr (v . get (0usize)) ? . try_into () ?))) { return Ok (rt) ; } if let Ok (rt) = syn_args :: utils :: ewc :: < _ , _ , anyhow :: Error > (|| Ok (ModuleArgs :: F4 (syn_args :: utils :: otr (v . get (0usize)) ? . try_into () ?))) { return Ok (rt) ; } if let Ok (rt) = syn_args :: utils :: ewc :: < _ , _ , anyhow :: Error > (|| Ok (ModuleArgs :: F5 (syn_args :: utils :: otr (v . get (0usize)) ? . try_into () ?))) { return Ok (rt) ; } if let Ok (rt) = syn_args :: utils :: ewc :: < _ , _ , anyhow :: Error > (|| Ok (ModuleArgs :: F6 (syn_args :: utils :: otr (v . get (0usize)) ? . try_into () ?))) { return Ok (rt) ; } } Err (Self :: Error :: new (proc_macro2 :: Span :: call_site () , "Invalid args")) } } impl TryFrom < syn_args :: Value > for ModuleArgs { type Error = syn :: Error ; fn try_from (v : syn_args :: Value) -> Result < Self , Self :: Error > { ModuleArgs :: try_from (& v) } } impl syn_args :: ArgsParse for ModuleArgs { fn parse (input : & str) -> Result < Self , syn :: Error > { syn_args :: Formal :: new () . parse (input) ? . try_into () } } impl TryFrom < syn_args :: Transform < '_ >> for ModuleArgs { type Error = syn :: Error ; fn try_from (value : syn_args :: Transform) -> Result < Self , Self :: Error > { if let syn_args :: Value :: Object (obj) = value . value { if let Some (v) = obj . get (value . key) { return Ok (v . try_into () ?) ; } } Err (Self :: Error :: new (proc_macro2 :: Span :: call_site () , "Expected SubWrap")) } }
